//
//  Response.swift
//  FRCore
//
//  Copyright (c) 2020 ForgeRock. All rights reserved.
//
//  This software may be modified and distributed under the terms
//  of the MIT license. See the LICENSE file for details.
//

import Foundation

/// This struct is a representation of FRAuth's API request response data structure, and is responsible to handle response serialization
public struct Response {
    
    /// response Data
    let data: Data?
    /// URLResponse object containing HTTP information of the response
    let response: URLResponse?
    /// API request failure error
    let error: Error?
    
    public init(data: Data?, response: URLResponse?, error: Error?) {
        self.data = data
        self.response = response
        self.error = error
    }
    
    /// Parses response into Result object
    ///
    /// - Returns: Result object notifying whether the request was successful, or failed with an error
    public func parseReponse() -> Result {

        if let error = self.error {
            return Result.failure(error: error)
        }
        else if let httpResponse = self.response as? HTTPURLResponse, (200 ..< 303) ~= httpResponse.statusCode {
            if let responseData = self.data, responseData.isEmpty {
                return Result.success(result: [:], httpResponse: self.response)
            }
            else {
                //  TODO: Response handling as per Accept header
                if let jsonData = try? JSONSerialization.jsonObject(with: self.data ?? Data(), options: []) as? [String:AnyObject] {
                    return Result.success(result: jsonData, httpResponse: self.response)
                }
                else {
                    return Result.failure(error: NetworkError.invalidResponseDataType)
                }
            }
        }
        else {
            return Result.failure(error: NetworkError.apiRequestFailure(self.data, self.response, self.error))
        }
    }
}


public enum NetworkError: FRError {
    case invalidResponseDataType
    case invalidRequest(String)
    case apiRequestFailure(Data?, URLResponse?, Error?)
}

extension NetworkError {
    
    /// Unique error code for given error
    var code: Int {
        return self.parseErrorCode()
    }
    
    /// Parses AuthError value into integer error code
    ///
    /// - Returns: Int value of unique error code
    func parseErrorCode() -> Int {
        switch self {
        case .apiRequestFailure:
            return 5000010
        case .invalidResponseDataType:
            return 5000003
        case .invalidRequest:
            return 5000005
        }
    }
}


// MARK: - CustomNSError protocols
extension NetworkError: CustomNSError {
    
    /// An error domain for AuthError
    public static var errorDomain: String { return "com.forgerock.ios.frcore.network" }
    
    /// Error codes for each error enum
    public var errorCode: Int {
        return self.parseErrorCode()
    }
    
    /// Error UserInfo
    public var errorUserInfo: [String : Any] {
        switch self {
        case .apiRequestFailure(let data, let response, let error):
            var userInfo: [String: Any] = [:]
            userInfo[NSLocalizedDescriptionKey] = "Request failed"
            userInfo["com.forgerock.ios.frcore.network.responseData"] = data
            userInfo["com.forgerock.ios.frcore.network.urlresponse"] = response
            userInfo["com.forgerock.ios.frcore.network.error"] = error
            return userInfo
        case .invalidRequest(let requestDescription):
            return [NSLocalizedDescriptionKey: "Invalid request: " + requestDescription]
        case .invalidResponseDataType:
            return [NSLocalizedDescriptionKey: "Invalid response data type"]
        }
    }
}

/// This protocol is a base representation of Error object generated by FRAuth framework
public protocol FRError: Error {
}

extension FRError {
    
    /// Builds Dictionary for NSError
    ///
    /// - Parameters:
    ///   - errorMessage: Error message for NSError's localized error description
    ///   - additionalInfo: Additional information about the error (error response payload) as Dictionary with key 'com.forgerock.auth.errorInfoKey'
    /// - Returns: Dictionary containing a localized error message and optional additional error payload
    public func buildErrorUserInfo(errorMessage: String, additionalInfo: [String: Any]? ) -> [String: Any] {
        var userInfo: [String: Any] = [:]
        userInfo[NSLocalizedDescriptionKey] = errorMessage
        
        if let additionalInfo = additionalInfo {
            userInfo["com.forgerock.auth.errorInfoKey"] = additionalInfo
        }
        
        return userInfo
    }
}
